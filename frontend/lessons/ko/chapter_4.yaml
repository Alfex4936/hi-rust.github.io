- title: Chapter 4 - Advanced
  source: >-
    /ajou.webp
  content_markdown: >
    # Rust 고급 주제: 강좌 개요

    이 장에서는 Rust의 고급 주제에 대해 다룹니다.


    동시성, `unsafe`, 매크로와 같은 Rust 고급 구문에 대해 배웁니다.


    ## 1. 동시성(Concurrency)

    Rust는 동시성 문제를 안전하게 다루기 위한 독특한 기능을 제공합니다.


    a. 동시성의 개념 및 중요성

    b. 스레드(Thread) 사용하기

    c. 채널(Channels)을 사용한 통신

    d. 뮤텍스(Mutex) 및 동기화 프리미티브

    e. 비동기 프로그래밍 및 `async`/`await`


    ## 2. `unsafe` 코드

    Rust의 안전성 보장을 어기는 경우에는 `unsafe` 블록을 사용해야 합니다.


    a. `unsafe`의 개념 및 필요성

    b. `unsafe` 함수 및 메서드

    c. 원시 포인터(Raw Pointers) 사용하기

    d. 외부 함수 및 FFI(Foreign Function Interface) 사용하기


    ## 3. 매크로(Macros)

    Rust의 매크로 시스템은 코드를 생성하고 추상화하는 강력한 방법을 제공합니다.


    a. 매크로의 개념 및 사용 사례

    b. 선언형 매크로(Declarative Macros) 생성하기

    c. 프로시저 매크로(Procedural Macros) 생성하기

    d. 매크로 규칙 및 패턴 매칭
- title: 동시성(Concurrency)
  source: >-
    /ferris_lofi.png
  content_markdown: >
    ## a. 동시성의 개념 및 중요성

    동시성(Concurrency)은 여러 작업이 동시에 실행되는 것처럼 보이게 만드는 프로그래밍 기법입니다.


    동시성을 사용하면 애플리케이션의 성능을 향상시킬 수 있으며, 멀티코어 프로세서와 같은 병렬 컴퓨팅 기술을 최대한 활용할 수 있습니다.


    Rust는 동시성 문제를 안전하게 다루기 위한 독특한 기능을 제공하며,


    이러한 기능 덕분에 데이터 경쟁이나 교착 상태와 같은 동시성 문제가 발생할 가능성을 줄일 수 있습니다.


    ## b. 스레드(Thread) 사용하기

    스레드는 프로세스 내에서 실행되는 독립적인 작업 단위입니다.


    Rust에서 스레드를 생성하고 관리하려면 `std::thread` 모듈을 사용합니다.

    %rust%
    use std::thread;

    use std::time::Duration;


    fn main() {
        let handle = thread::spawn(|| {
            for i in 1..10 {
                println!("스레드에서: {}", i);
                thread::sleep(Duration::from_millis(1));
            }
        });

        for i in 1..5 {
            println!("메인 스레드에서: {}", i);
            thread::sleep(Duration::from_millis(1));
        }

        handle.join().unwrap();
    }
    %end%

    ## c. 채널(Channels)을 사용한 통신

    채널은 스레드 간에 메시지를 전달하는 동기화 primitive입니다.


    Rust에서는 `std::sync::mpsc`(multiple producer, single consumer) 모듈을 사용하여 채널을 구현할 수 있습니다.


    %rust%
    use std::sync::mpsc;

    use std::thread;


    fn main() {
        let (tx, rx) = mpsc::channel();

        thread::spawn(move || {
            let val = String::from("안녕하세요");
            tx.send(val).unwrap();
        });

        let received = rx.recv().unwrap();
        println!("수신: {}", received);
    }
    %end%


    ## d. 뮤텍스(Mutex) 및 동기화 프리미티브

    뮤텍스(Mutex)는 한 번에 하나의 스레드만 데이터에 접근할 수 있도록 하는 동기화 프리미티브입니다.


     Rust에서 뮤텍스를 사용하려면 `std::sync::Mutex`를 사용합니다.

    %rust%
    use std::sync::{Arc, Mutex};

    use std::thread;


    fn main() {
        let counter = Arc::new(Mutex::new(0::new()));
        let mut handles = vec![];
        for _ in 0..10 {
        let counter = Arc::clone(&counter);
        let handle = thread::spawn(move || {
              let mut num = counter.lock().unwrap();
              *num += 1;
          });
          handles.push(handle);
        }

        for handle in handles {
            handle.join().unwrap();
        }

        println!("결과: {}", *counter.lock().unwrap());
    }
    %end%


    ## e. 비동기 프로그래밍 및 async/await

    비동기 프로그래밍은 동시에 실행되어야 하는 작업을 더 효율적으로 관리할 수 있도록 합니다.


    Rust에서는 `async`와 `await` 키워드를 사용하여 비동기 코드를 작성할 수 있습니다.

    %rust%
    use futures::executor::block_on;


    async fn hello_world() {
        println!("안녕, 비동기 세계!");
    }


    fn main() {
        let future = hello_world(); // async 함수는 호출되면 Future를 반환합니다.
        block_on(future); // 비동기 함수를 실행하기 위해 블로킹 실행기 사용
    }
    %end%


    비동기 프로그래밍에서 주요한 것은 비동기 함수와 Future, 실행기(executor) 등의 개념입니다.


    비동기 함수는 async fn으로 정의되며, Future를 반환합니다.


    Future는 실행 결과를 나타내는 값으로, 실행기를 사용하여 평가할 수 있습니다.


    이를 통해 동시에 실행되어야 하는 작업을 효율적으로 관리할 수 있습니다.


    Rust에서는 주로 `tokio`라는 라이브러를 사용하여 async를 좀 더 쉽게 사용하고 더 많은 기능을 제공 받습니다.


    tokio를 공부하고 싶으신 분들은 [@여기](https://tokio.rs/)를 참고하세요.
- title: 매크로(Macros)
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&code=macro_rules%21+times+%7B%0D%0A++++%28%24num%3Aexpr%2C+%24body%3Ablock%29+%3D%3E+%7B%0D%0A++++++++times%21%28None%2C+%24num%2C+%24body%29%3B%0D%0A++++%7D%3B%0D%0A++++%28%24label%3Aexpr%2C+%24num%3Aexpr%2C+%24body%3Ablock%29+%3D%3E+%7B%0D%0A++++++++if+let+Some%28label%29+%3D+%24label+%7B%0D%0A++++++++++++println%21%28%22Task%3A+%7B%7D%22%2C+label%29%3B%0D%0A++++++++%7D%0D%0A%0D%0A++++++++let+mut+total_time+%3D+std%3A%3Atime%3A%3ADuration%3A%3Anew%280%2C+0%29%3B%0D%0A++++++++let+mut+min_time+%3D+std%3A%3Atime%3A%3ADuration%3A%3Afrom_secs%28u64%3A%3AMAX%29%3B%0D%0A++++++++let+mut+max_time+%3D+std%3A%3Atime%3A%3ADuration%3A%3Afrom_secs%280%29%3B%0D%0A%0D%0A++++++++for+_+in+0..%24num+%7B%0D%0A++++++++++++let+start_time+%3D+std%3A%3Atime%3A%3AInstant%3A%3Anow%28%29%3B%0D%0A++++++++++++%24body%0D%0A++++++++++++let+elapsed+%3D+start_time.elapsed%28%29%3B%0D%0A++++++++++++total_time+%2B%3D+elapsed%3B%0D%0A++++++++++++min_time+%3D+min_time.min%28elapsed%29%3B%0D%0A++++++++++++max_time+%3D+max_time.max%28elapsed%29%3B%0D%0A++++++++++++println%21%28%0D%0A++++++++++++++++%22Execution+time+for+iteration%3A+%7B%7D+ms%22%2C%0D%0A++++++++++++++++elapsed.as_millis%28%29%0D%0A++++++++++++%29%3B%0D%0A++++++++%7D%0D%0A%0D%0A++++++++let+avg_time+%3D+total_time+%2F+%24num%3B%0D%0A++++++++println%21%28%22Average+execution+time%3A+%7B%7D+ms%22%2C+avg_time.as_millis%28%29%29%3B%0D%0A++++++++println%21%28%22Minimum+execution+time%3A+%7B%7D+ms%22%2C+min_time.as_millis%28%29%29%3B%0D%0A++++++++println%21%28%22Maximum+execution+time%3A+%7B%7D+ms%22%2C+max_time.as_millis%28%29%29%3B%0D%0A++++%7D%3B%0D%0A%7D%0D%0A%0D%0Afn+is_prime%28n%3A+u64%29+-%3E+bool+%7B%0D%0A++++if+n+%3C%3D+1+%7B%0D%0A++++++++return+false%3B%0D%0A++++%7D%0D%0A++++for+i+in+2..%3D%28%28n+as+f64%29.sqrt%28%29+as+u64%29+%7B%0D%0A++++++++if+n+%25+i+%3D%3D+0+%7B%0D%0A++++++++++++return+false%3B%0D%0A++++++++%7D%0D%0A++++%7D%0D%0A++++true%0D%0A%7D%0D%0A%0D%0Afn+main%28%29+%7B%0D%0A++++times%21%28Some%28%22Prime+number+summation%22%29%2C+3%2C+%7B%0D%0A++++++++let+mut+sum+%3D+0u64%3B%0D%0A++++++++let+mut+num+%3D+2u64%3B%0D%0A++++++++let+mut+counter+%3D+0%3B%0D%0A%0D%0A++++++++while+counter+%3C+10_000+%7B%0D%0A++++++++++++if+is_prime%28num%29+%7B%0D%0A++++++++++++++++sum+%2B%3D+num%3B%0D%0A++++++++++++++++counter+%2B%3D+1%3B%0D%0A++++++++++++%7D%0D%0A++++++++++++num+%2B%3D+1%3B%0D%0A++++++++%7D%0D%0A++++++++println%21%28%22Sum+of+first+10%2C000+prime+numbers%3A+%7B%7D%22%2C+sum%29%3B%0D%0A++++%7D%29%3B%0D%0A%7D
  content_markdown: >
    Rust의 매크로 시스템은 코드를 생성하고 추상화하는 강력한 방법을 제공합니다.

    ## a. 매크로의 개념 및 사용 사례

    매크로는 코드를 생성하거나 특정 패턴에 따라 코드를 변형하는 데 사용되는 메타 프로그래밍 기술입니다.


    Rust에서는 매크로를 사용하여 코드 중복을 줄이고, 가독성을 향상시키며, 유연한 추상화를 구현할 수 있습니다.


    매크로는 주로 컴파일 시간에 코드를 생성하거나 수정하는 작업에 사용됩니다. (ex. `println!`)


    ## b. 선언형 매크로(Declarative Macros) 생성하기

    선언형 매크로는 매크로 규칙을 사용하여 코드를 생성하는 매크로입니다.


    `macro_rules!` 키워드를 사용하여 선언형 매크로를 정의할 수 있습니다.

    %rust%
    macro_rules! vec {
        ( $( $x:expr ),* ) => {
            {
                let mut temp_vec = Vec::new();
                $(
                    temp_vec.push($x);
                )*
                temp_vec
            }
        };
    }


    fn main() {
        let v = vec![1, 2, 3];
        println!("v: {:?}", v);
    }
    %end%


    ## c. 프로시저 매크로(Procedural Macros) 생성하기

    프로시저 매크로는 Rust의 컴파일러에 플러그인으로 동작하는 함수입니다.


    프로시저 매크로는 주로 속성(attribute)에 사용되며, 소스 코드를 받아 변형된 소스 코드를 반환합니다.


    프로시저 매크로를 정의하려면 `proc_macro` 라이브러리를 사용하고, 별도의 크레이트로 구성해야 합니다.


    %rust%
    // 프로시저 매크로를 정의하는 크레이트입니다.

    use proc_macro::TokenStream;

    use quote::quote;

    use syn::{parse_macro_input, DeriveInput};


    #[proc_macro_derive(HelloMacro)]

    pub fn hello_macro_derive(input: TokenStream) -> TokenStream {
        let ast = parse_macro_input!(input as DeriveInput);
        let name = &ast.ident;
        let gen = quote! {
            impl HelloMacro for #name {
                fn hello_macro() {
                    println!("안녕하세요, 여기는 {}입니다.", stringify!(#name));
                }
            }
        };
        gen.into()
    }
    %end%


    %rust%
    // 프로시저 매크로를 사용하는 크레이트입니다.

    use hello_macro::HelloMacro;

    use hello_macro_derive::HelloMacro;


    #[derive(HelloMacro)]

    struct Pancakes;


    fn main() {
        Pancakes::hello_macro();
    }
    %end%


    ## d. 매크로 규칙 및 패턴 매칭

    Rust의 매크로는 패턴 매칭을 통해 매개 변수를 추출하고, 규칙에 따라 코드를 생성합니다.


    매크로에서 패턴 매칭을 사용하려면 다음 구문을 사용합니다.

    - `$name:expr`: 표현식(Expressions) 매치

    - `$name:ident`: 식별자(Identifiers) 매치

    - `$name:ty`: 타입(Types) 매치

    - `$name:pat`: 패턴(Patterns) 매치

    - `$name:stmt`: 문장(Statements) 매치

    - `$name:block`: 블록(Blocks) 매치

    - `$name:meta`: 메타 데이터(Meta-data) 매치

    - `$name:tt`: 토큰 트리(Token Tree) 매치

    - `$name:item`: 항목(Items) 매치


    또한, 매크로에서 사용할 수 있는 반복자 구문도 있습니다.

    - `$(...)*`: 0회 이상 반복

    - `$(...)+`: 1회 이상 반복


    %rust%
    macro_rules! create_function {
        ($func_name:ident) => (
            fn $func_name() {
                println!("함수 {}가 호출되었습니다.", stringify!($func_name));
            }
        );
    }


    create_function!(foo);

    create_function!(bar);


    fn main() {
        foo();
        bar();
    }
    %end%

    이렇게 매크로를 사용하여 코드 생성 및 추상화를 구현하면, 유연한 프로그래밍을 할 수 있고, 가독성 및 유지보수성을 높일 수 있습니다.


    매크로의 핵심은 패턴 매칭과 규칙을 통해 코드를 재사용하고, 확장성을 높이는 것입니다.

- title: unsafe 코드
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&code=fn+main%28%29+%7B%0A++++let+mut+vec1+%3D+vec%21%5B1%2C+2%2C+3%5D%3B%0A++++let+mut+vec2+%3D+vec%21%5B4%2C+5%2C+6%5D%3B%0A%0A++++println%21%28%22%EA%B5%90%ED%99%98+%EC%A0%84%3A+vec1+%3D+%7B%3A%3F%7D%2C+vec2+%3D+%7B%3A%3F%7D%22%2C+vec1%2C+vec2%29%3B%0A%0A++++unsafe+%7B%0A++++++++unsafe_swap%28%26mut+vec1%2C+%26mut+vec2%29%3B%0A++++%7D%0A%0A++++println%21%28%22%EA%B5%90%ED%99%98+%ED%9B%84%3A+vec1+%3D+%7B%3A%3F%7D%2C+vec2+%3D+%7B%3A%3F%7D%22%2C+vec1%2C+vec2%29%3B%0A%7D%0A%0A%2F%2F+%EB%B2%A1%ED%84%B0%EC%9D%98+%EB%82%B4%EB%B6%80+%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC+%EC%A7%81%EC%A0%91+%EA%B5%90%ED%99%98%ED%95%98%EA%B8%B0+%EC%9C%84%ED%95%B4+%EC%9B%90%EC%8B%9C+%ED%8F%AC%EC%9D%B8%ED%84%B0%EC%99%80+unsafe%EB%A5%BC+%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94+%ED%95%A8%EC%88%98%0Aunsafe+fn+unsafe_swap%28vec1%3A+%26mut+%5Bi32%5D%2C+vec2%3A+%26mut+%5Bi32%5D%29+%7B%0A++++%2F%2F+%EB%B2%A1%ED%84%B0%EC%9D%98+%EA%B8%B8%EC%9D%B4%EA%B0%80+%EA%B0%99%EC%9D%80%EC%A7%80+%ED%99%95%EC%9D%B8%0A++++assert_eq%21%28vec1.len%28%29%2C+vec2.len%28%29%29%3B%0A%0A++++%2F%2F+%EB%B2%A1%ED%84%B0%EC%9D%98+%EB%82%B4%EB%B6%80+%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%97%90+%EC%A0%91%EA%B7%BC%ED%95%98%EA%B8%B0+%EC%9C%84%ED%95%B4+%EC%9B%90%EC%8B%9C+%ED%8F%AC%EC%9D%B8%ED%84%B0%EB%A5%BC+%EC%83%9D%EC%84%B1%ED%95%A9%EB%8B%88%EB%8B%A4.%0A++++let+ptr1+%3D+vec1.as_mut_ptr%28%29%3B%0A++++let+ptr2+%3D+vec2.as_mut_ptr%28%29%3B%0A%0A++++%2F%2F+%EC%9B%90%EC%8B%9C+%ED%8F%AC%EC%9D%B8%ED%84%B0%EB%A5%BC+%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC+%EB%B2%A1%ED%84%B0%EC%9D%98+%EC%9B%90%EC%86%8C%EB%A5%BC+%EA%B5%90%ED%99%98%ED%95%A9%EB%8B%88%EB%8B%A4.%0A++++for+i+in+0..vec1.len%28%29+%7B%0A++++++++%2F%2F+%EC%9B%90%EC%8B%9C+%ED%8F%AC%EC%9D%B8%ED%84%B0%EB%A5%BC+%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94+%EC%97%B0%EC%82%B0%EC%9D%80+unsafe+%EB%B8%94%EB%A1%9D+%EB%82%B4%EC%97%90%EC%84%9C+%EC%88%98%ED%96%89%ED%95%B4%EC%95%BC+%ED%95%A9%EB%8B%88%EB%8B%A4.%0A++++++++let+temp+%3D+*ptr1.add%28i%29%3B%0A++++++++*ptr1.add%28i%29+%3D+*ptr2.add%28i%29%3B%0A++++++++*ptr2.add%28i%29+%3D+temp%3B%0A++++%7D%0A%7D%0A
  comment: >-
    이 예제에서는 벡터의 내부 데이터에 직접 접근하여 값을 교환하는 것이 가능하지만, Rust의 안전성을 보장할 수 없기 때문에 unsafe를 사용해야 합니다. 이런 경우에는 가능하면 안전한 Rust 코드를 사용하거나, 필요한 경우에만 최소한의 unsafe 코드를 사용하여 작업을 수행하는 것이 좋습니다.
  content_markdown: >
    Rust는 기본적으로 안전한 프로그래밍을 위한 다양한 기능을 제공합니다.


    하지만, 때로는 안전성을 포기하고, 저수준의 시스템 작업을 수행해야 하는 경우가 있습니다.


    이 때 `unsafe` 키워드를 사용합니다.


    ## a. unsafe의 개념 및 필요성

    `unsafe`는 Rust 컴파일러가 안전성을 보장할 수 없는 코드를 표시하는 키워드입니다.


    이를 사용하면 Rust의 안전성 검사를 우회하고, 저수준의 시스템 작업을 수행할 수 있습니다.


    주로 외부 함수, 원시 포인터, 정적 변수에 접근하는 등의 작업에 사용됩니다.


    ## b. unsafe 함수 및 메서드

    `unsafe` 키워드를 사용하여 함수와 메서드를 정의할 수 있습니다.


    이를 사용하면 안전하지 않은 작업을 수행할 수 있습니다.


    호출하는 쪽에서도 `unsafe` 블록 내에서 호출해야 합니다.


    %rust%
    unsafe fn dangerous_function() {
        // 안전하지 않은 작업 수행
    }


    fn main() {
        unsafe {
            dangerous_function();
        }
    }
    %end%


    ## c. 원시 포인터(Raw Pointers) 사용하기

    원시 포인터는 메모리 주소를 직접 가리키는 포인터로, Rust의 안전성을 보장하지 않습니다.


    `*const T`와 `*mut T` 형식으로 사용할 수 있습니다.


    원시 포인터는 `unsafe` 블록 내에서 사용해야 합니다.

    %rust%
    fn main() {
        let mut num = 5;
        let r1 = &num as *const i32;
        let r2 = &mut num as *mut i32;

        unsafe {
            println!("r1 가리키는 값: {}", *r1);
            println!("r2 가리키는 값: {}", *r2);
        }
    }
    %end%


    ## d. 외부 함수 및 FFI(Foreign Function Interface) 사용하기

    외부 함수는 다른 프로그래밍 언어로 작성된 함수를 Rust에서 호출할 수 있도록 해주는 인터페이스입니다.


    외부 함수를 사용하려면 `extern` 키워드와 `unsafe`를 사용해야 합니다.

    %rust%
    // C 언어의 함수를 호출하는 예시

    extern "C" {
        fn abs(input: i32) -> i32;
    }


    fn main() {
        let x = -3;
        let result = unsafe { abs(x) };
        println!("{}의 절댓값은 {}입니다.", x, result);
    }
    %end%

    이렇게 `unsafe`를 사용하여 Rust의 안전성 검사를 우회할 수 있습니다.


    하지만 가능한 한 `unsafe`를 사용하지 않고, 안전한 코드를 작성하는 것이 좋습니다.


    정말 필요한 경우에만 사용하고, 주의해서 사용해야 합니다.
- title: Chapter 4 - Conclusion
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&code=%2F%2F+TODO+1%3A+%EB%A7%A4%ED%81%AC%EB%A1%9C%EB%A5%BC+%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC+%EB%91%90+%EB%B2%A1%ED%84%B0%EC%9D%98+%EB%8D%A7%EC%85%88%EC%9D%84+%EC%88%98%ED%96%89%ED%95%98%EB%8A%94+%ED%95%A8%EC%88%98%EB%A5%BC+%EC%9E%91%EC%84%B1%ED%95%98%EC%84%B8%EC%9A%94.%0D%0A%2F%2F+%EC%B1%84%EC%9B%8C%EB%B3%B4%EC%84%B8%EC%9A%94.%0D%0Amacro_rules%21+...%0D%0A%0D%0A%0D%0Afn+main%28%29+%7B%0D%0A++++let+vec1+%3D+vec%21%5B1%2C+2%2C+3%5D%3B%0D%0A++++let+vec2+%3D+vec%21%5B4%2C+5%2C+6%5D%3B%0D%0A++++let+result+%3D+add_vectors%21%28vec1%2C+vec2%29%3B%0D%0A%0D%0A++++println%21%28%22%EB%B2%A1%ED%84%B0+%EB%8D%A7%EC%85%88+%EA%B2%B0%EA%B3%BC%3A+%7B%3A%3F%7D%22%2C+result%29%3B%0D%0A%7D%0D%0A%0D%0A%0D%0Afn+add_vectors_unsafe%28vec1%3A+%26%5Bi32%5D%2C+vec2%3A+%26%5Bi32%5D%29+-%3E+Vec%3Ci32%3E+%7B%0D%0A++++%2F%2F+%EB%B2%A1%ED%84%B0%EC%9D%98+%EA%B8%B8%EC%9D%B4%EA%B0%80+%EA%B0%99%EC%9D%80%EC%A7%80+%ED%99%95%EC%9D%B8%ED%95%A9%EB%8B%88%EB%8B%A4.%0D%0A++++assert_eq%21%28vec1.len%28%29%2C+vec2.len%28%29%29%3B%0D%0A%0D%0A++++let+mut+result+%3D+Vec%3A%3Awith_capacity%28vec1.len%28%29%29%3B%0D%0A%0D%0A++++%2F%2F+TODO+2%3A+unsafe%EB%A5%BC+%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC+%EB%B2%A1%ED%84%B0%EC%9D%98+%EB%82%B4%EB%B6%80+%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%97%90+%EC%A0%91%EA%B7%BC%ED%95%98%EA%B3%A0+%EA%B0%92%EC%9D%84+%EB%8D%94%ED%95%98%EC%84%B8%EC%9A%94.%0D%0A++++%2F%2F+%EC%B1%84%EC%9B%8C%EB%B3%B4%EC%84%B8%EC%9A%94.%0D%0A%0D%0A++++result%0D%0A%7D%0D%0A
  content_markdown: >
    다음은 여러분들이 unsafe와 macro를 사용하여 문제를 해결해 보는 고급 문제입니다.


    아래 주석을 참고하여 코드를 완성해보세요.


    문제 설명:

    두 개의 Vec<i32> 벡터를 더하는 프로그램을 작성하세요.


    이때, 매크로를 사용하여 덧셈 작업을 수행하고, 벡터의 내부 데이터에 직접 접근하기 위해 unsafe를 사용하세요.

    1. 매크로를 사용하여 두 벡터의 덧셈을 수행하는 함수를 작성하세요.

    2. unsafe를 사용하여 벡터의 내부 데이터에 접근하고 값을 더하세요.


    <div>
    <button type="button" class="collapsible">정답 보기</button>
    <div class="content">
    <p>
    %rust%
    // 매크로를 사용하여 두 벡터의 덧셈을 수행하는 함수를 작성합니다.

    macro_rules! add_vectors {
        ($vec1:expr, $vec2:expr) => {
            add_vectors_unsafe(&$vec1, &$vec2)
        };
    }


    fn main() {
        let vec1 = vec![1, 2, 3];
        let vec2 = vec![4, 5, 6];
        let result = add_vectors!(vec1, vec2);

        println!("벡터 덧셈 결과: {:?}", result);
    }


    fn add_vectors_unsafe(vec1: &[i32], vec2: &[i32]) -> Vec<i32> {
        // 벡터의 길이가 같은지 확인합니다.
        assert_eq!(vec1.len(), vec2.len());

        let mut result = Vec::with_capacity(vec1.len());

        // unsafe를 사용하여 벡터의 내부 데이터에 접근하고 값을 더합니다.
        let ptr1 = vec1.as_ptr();
        let ptr2 = vec2.as_ptr();
        for i in 0..vec1.len() {
            unsafe {
                result.push(*ptr1.add(i) + *ptr2.add(i));
            }
        }

        result
    }
    %end%
    </div>
    </div>
